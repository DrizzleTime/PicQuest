@page "/"
@using PicQuest.Services
@using PicQuest.Components.Dialogs
@using PicQuest.Models
@inject IPictureService PictureService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<PageTitle>PicQuest - 图片搜索与库管理</PageTitle>
<div class="background-container">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-8">
        <!-- 标题和描述 -->
        <MudStack AlignItems="AlignItems.Center" Class="mb-10 hero-section">
            <MudText Typo="Typo.h1" Class="main-title">PicQuest</MudText>
            <MudText Typo="Typo.subtitle1" Class="subtitle">基于视觉模型和向量嵌入的智能图像检索系统</MudText>
        </MudStack>
        <!-- 搜索和上传区域 -->
        <MudPaper Elevation="3" Class="px-4 py-6 mb-8 rounded-lg search-upload-container">
            <MudGrid Spacing="2" Class="align-center">
                <MudItem xs="12" md="6">
                    <div class="d-flex align-center" style="height: 50px;">
                        <MudTextField @bind-Value="_searchQuery"
                                      Label="搜索图片..."
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      AdornmentColor="Color.Primary"
                                      OnKeyDown="HandleKeyDown"
                                      Class="search-field"
                                      Disabled="@_isSearching"
                                      FullWidth="true"/>
                    </div>
                </MudItem>
                <MudItem xs="12" md="2">
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               StartIcon="@(_isSearching ? null : Icons.Material.Filled.Search)"
                               OnClick="@(() => SearchPictures())"
                               Class="action-button"
                               Style="height: 50px;"
                               Disabled="@(_isSearching || _isUploading)"
                               FullWidth="true">
                        @if (_isSearching)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <span class="ms-2">搜索中...</span>
                        }
                        else
                        {
                            <span>搜索</span>
                        }
                    </MudButton>
                </MudItem>
                <MudItem xs="12" md="4">
                    <InputFile id="fileInput" OnChange="OnFilesSelected" hidden multiple
                               disabled="@(_isUploading || _isSearching)"/>
                    <MudButton HtmlTag="label"
                               Color="Color.Secondary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="fileInput"
                               Variant="Variant.Filled"
                               Class="action-button"
                               Style="height: 50px;"
                               Disabled="@(_isUploading || _isSearching)"
                               FullWidth="true">
                        上传图片
                    </MudButton>
                </MudItem>
                <!-- 搜索设置 -->
                <MudItem xs="12" Class="mt-4">
                    <MudExpansionPanel Class="similarity-threshold-panel">
                        <TitleContent>
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Tune" Class="mr-2"/>
                                <MudText>高级搜索设置</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudGrid Class="mt-2">
                                <MudItem xs="12" md="8">
                                    <MudText Typo="Typo.subtitle2" Class="mb-2">
                                        相似度门槛: @(_similarityThreshold.ToString("P0"))</MudText>
                                    <MudSlider @bind-Value="_similarityThreshold"
                                               Min="0" Max="1" Step="0.05"
                                               Color="Color.Secondary"
                                               TickMarks="true"
                                               ValueLabel="true"/>
                                </MudItem>
                                <MudItem xs="12" md="4" Class="d-flex align-end">
                                    <MudButton OnClick="ResetSimilarityThreshold"
                                               Variant="Variant.Outlined"
                                               Color="Color.Default"
                                               Size="Size.Small"
                                               Class="ml-auto mb-2">
                                        重置为默认值
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <!-- 上传状态显示 -->
        @if (_isUploading)
        {
            <MudPaper Elevation="2" Class="mb-6 py-4 px-4 rounded-lg">
                <MudText Typo="Typo.h6" Class="mb-2">正在上传文件</MudText>
                <MudProgressLinear Color="Color.Secondary"
                                   Value="@_uploadProgress"
                                   Class="my-4"
                                   Striped="true"
                                   Size="Size.Large"
                                   Indeterminate="false"/>
                <MudText Align="Align.Center">上传中
                    (@_uploadProgress%)...@_currentFileIndex/@_totalFilesToUpload</MudText>
            </MudPaper>
        }
        <!-- 搜索结果或图库展示 -->
        @if (_isSearching)
        {
            <MudPaper Elevation="0" Class="d-flex flex-column align-center py-12">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="mb-4"/>
                <MudText Typo="Typo.h6">正在搜索图片...</MudText>
                <MudText Typo="Typo.body2" Class="mt-2">根据"@_searchQuery"查找相关图片</MudText>
            </MudPaper>
        }
        else if (_paginatedPictures == null)
        {
            <div class="d-flex justify-center my-12">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
            </div>
        }
        else if (!_paginatedPictures.Items.Any())
        {
            <MudPaper Elevation="0" Class="d-flex flex-column align-center py-12 empty-state-container">
                <MudIcon Icon="@Icons.Material.Filled.ImageNotSupported" Size="Size.Large" Class="mb-4 empty-icon"/>
                <MudText Typo="Typo.h5" Class="mb-2">没有找到图片</MudText>
                <MudText>试试上传一些图片或者使用其他关键词搜索</MudText>
            </MudPaper>
        }
        else
        {
            <MudText Typo="Typo.h5"
                     Class="mb-4 mt-6 gallery-title">@(_isSearchMode ? "搜索结果" : "公共图片库")</MudText>
            <MudGrid Spacing="4">
                @foreach (var picture in _paginatedPictures.Items)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Elevation="3" Class="picture-card">
                            <MudCardMedia Image="@picture.ThumbnailPath"
                                          Height="240"
                                          Style="object-fit: cover; transition: transform 0.3s;"
                                          Class="image-hover"
                                          @onclick="@(_ => ShowImageDetails(picture))"/>
                            <MudCardContent>
                                <MudText Typo="Typo.h6" Class="text-truncate card-title">@picture.Name</MudText>
                                <MudText Typo="Typo.body2" Class="text-truncate picture-description"
                                         Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 100%;">
                                    @picture.Description
                                </MudText>
                                @if (_isSearchMode && picture.Similarity != null)
                                {
                                    <MudProgressLinear Color="Color.Success"
                                                       Value="@((double)picture.Similarity * 100)"
                                                       Class="flex-grow-1"/>
                                    <MudText Typo="Typo.caption" Class="ml-2 similarity-text">
                                        @Math.Round((double)picture.Similarity * 100)%
                                    </MudText>
                                }
                                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-3 timestamp">
                                    上传于 @picture.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                                </MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

            <!-- 分页控件 -->
            <MudPaper Elevation="0" Class="d-flex justify-center mt-6 pa-4">
                <MudPagination Count="@_paginatedPictures.TotalPages"
                               SelectedChanged="OnPageChanged"
                               Selected="@_currentPage"
                               Color="Color.Primary"
                               Size="Size.Medium"
                               Variant="Variant.Filled"
                               Rectangular="true"
                               BoundaryCount="1"
                               MiddleCount="3"
                               ShowFirstButton="true"
                               ShowLastButton="true"/>
            </MudPaper>

            @if (_isSearchMode)
            {
                <MudPaper Elevation="0" Class="d-flex justify-center mt-2 pa-4">
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Primary"
                               OnClick="ResetSearch"
                               StartIcon="@Icons.Material.Filled.ArrowBack">
                        返回全部图片
                    </MudButton>
                </MudPaper>
            }
        }
    </MudContainer>
</div>

@code {
    private string _searchQuery = "";
    private PaginatedResult<PictureViewModel>? _paginatedPictures;
    private bool _isUploading;
    private bool _isSearching;
    private bool _isSearchMode;
    private int _uploadProgress;
    private int _currentFileIndex;
    private int _totalFilesToUpload;
    private int _currentPage = 1;
    private int _pageSize = 8;
    private const int MaxAllowedFiles = 20;
    private const long MaxFileSize = 10485760;
    private double _similarityThreshold = 0.36;
    private const double DefaultSimilarityThreshold = 0.36;

    protected override async Task OnInitializedAsync()
    {
        await LoadPictures(_currentPage, _pageSize);
    }

    private async Task LoadPictures(int page = 1, int pageSize = 8)
    {
        try
        {
            _isSearching = true;
            StateHasChanged();

            var result = await PictureService.GetPicturesAsync(page, pageSize);
            _paginatedPictures = result;
            _isSearchMode = false;
            _currentPage = page;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载图片失败: {ex.Message}", Severity.Error);
            _paginatedPictures = new PaginatedResult<PictureViewModel>
            {
                Items = new List<PictureViewModel>(),
                Page = page,
                PageSize = pageSize,
                TotalCount = 0
            };
        }
        finally
        {
            _isSearching = false;
        }
    }

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        try
        {
            _isUploading = true;
            var files = e.GetMultipleFiles(MaxAllowedFiles);
            _totalFilesToUpload = files.Count;

            if (files.Count == 0) return;

            _currentFileIndex = 0;
            _uploadProgress = 0;

            int successCount = 0;
            long totalBytes = files.Sum(f => f.Size);
            long uploadedBytes = 0;

            foreach (var file in files)
            {
                try
                {
                    if (file.Size > MaxFileSize)
                    {
                        Snackbar.Add($"文件过大：{file.Name}", Severity.Warning);
                        continue;
                    }

                    await using var stream = file.OpenReadStream(maxAllowedSize: MaxFileSize);
                    using var memoryStream = new MemoryStream();
                    var buffer = new byte[16 * 1024];
                    int bytesRead;

                    while ((bytesRead = await stream.ReadAsync(buffer)) != 0)
                    {
                        await memoryStream.WriteAsync(buffer.AsMemory(0, bytesRead));
                        // 更新当前文件和总体进度
                        uploadedBytes += bytesRead;

                        // 计算总体进度百分比
                        _uploadProgress = (int)((double)uploadedBytes / totalBytes * 100);
                        // 通知UI更新
                        StateHasChanged();
                        await Task.Delay(10);
                    }

                    memoryStream.Position = 0;
                    await PictureService.UploadPictureAsync(file.Name, memoryStream, file.ContentType);
                    successCount++;
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"上传失败：{file.Name} - {ex.Message}", Severity.Error);
                }

                _currentFileIndex++;
                _uploadProgress = (int)((double)_currentFileIndex / _totalFilesToUpload * 100);
                StateHasChanged();
            }

            await LoadPictures();

            if (successCount > 0)
            {
                Snackbar.Add($"成功上传 {successCount} 个图片", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"上传过程中发生错误: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isUploading = false;
            _uploadProgress = 0;
        }
    }

    private async Task SearchPictures(int page = 1)
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            await LoadPictures();
            return;
        }

        try
        {
            _isSearching = true;
            StateHasChanged();

            await Task.Delay(300);

            var result = await PictureService.SearchPicturesByTextAsync(_searchQuery, page, _pageSize, _similarityThreshold);
            _paginatedPictures = result;
            _isSearchMode = true;
            _currentPage = page;

            if (!_paginatedPictures.Items.Any() && page == 1)
            {
                Snackbar.Add($"未找到与\"{_searchQuery}\"相关的图片", Severity.Info);
            }
            else if (page == 1)
            {
                Snackbar.Add($"找到 {_paginatedPictures.TotalCount} 个相关图片", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"搜索失败: {ex.Message}", Severity.Error);
            _paginatedPictures = new PaginatedResult<PictureViewModel>
            {
                Items = new List<PictureViewModel>(),
                Page = page,
                PageSize = _pageSize,
                TotalCount = 0
            };
        }
        finally
        {
            _isSearching = false;
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !_isSearching)
        {
            await SearchPictures();
        }
    }

    private async Task ShowImageDetails(PictureViewModel picture)
    {
        var parameters = new DialogParameters
        {
            ["Picture"] = picture,
            ["IsSearchResult"] = _isSearchMode
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
        };

        await DialogService.ShowAsync<PictureDetailDialog>("图片详情", parameters, options);
    }

    private void ResetSimilarityThreshold()
    {
        _similarityThreshold = DefaultSimilarityThreshold;
    }

    private async Task OnPageChanged(int page)
    {
        if (page == _currentPage) return;

        if (_isSearchMode)
        {
            await SearchPictures(page);
        }
        else
        {
            await LoadPictures(page, _pageSize);
        }
    }

    private async Task ResetSearch()
    {
        _searchQuery = "";
        await LoadPictures(1, _pageSize);
    }

}